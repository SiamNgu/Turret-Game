//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Input Master.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputMaster: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputMaster()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Input Master"",
    ""maps"": [
        {
            ""name"": ""1V1"",
            ""id"": ""5bc58fb5-32e8-43a2-9065-611f1c31a645"",
            ""actions"": [
                {
                    ""name"": ""Defender"",
                    ""type"": ""Value"",
                    ""id"": ""d6bada41-0cb6-46cb-bc46-7cb002376f61"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Invader"",
                    ""type"": ""Value"",
                    ""id"": ""9d43b086-d0d0-49ff-8d1c-a2f7a5475fb1"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""c7b2f28b-eb43-45d0-b040-49e9b2221622"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6b18a3ae-543d-49a9-961c-a870b87f080a"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Invader"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3bf34c4c-37a6-4cd0-9756-768b9021b820"",
                    ""path"": ""<Touchscreen>/touch0/position/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Invader"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a7d5279d-9c30-46b3-9656-1c0ac6a0b2a5"",
                    ""path"": ""<Touchscreen>/touch1/position/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touchscreen"",
                    ""action"": ""Invader"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f20c2ebe-5fef-402e-814e-a57ee9a04ba5"",
                    ""path"": ""<Touchscreen>/touch2/position/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touchscreen"",
                    ""action"": ""Invader"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f937786d-d7c6-4873-9437-1774a4ff2d4b"",
                    ""path"": ""<Touchscreen>/touch3/position/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touchscreen"",
                    ""action"": ""Invader"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""06434b29-5025-46b8-b35f-ce99492d4f82"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Defender"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8adf4031-3562-4ba2-9ae9-152dda5ba372"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""12c2c228-23a4-4fb9-8d22-42256b8dc900"",
                    ""path"": ""<Touchscreen>/touch0/position/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touchscreen"",
                    ""action"": ""Defender"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c3b7d1b1-cd30-4485-99d5-6b85771b28ab"",
                    ""path"": ""<Touchscreen>/touch1/position/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touchscreen"",
                    ""action"": ""Defender"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ec7a3abe-5d54-4dd0-9fbc-8500b08fb5fe"",
                    ""path"": ""<Touchscreen>/touch2/position/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touchscreen"",
                    ""action"": ""Defender"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c9ba271a-599b-4bc8-be2c-2c0eee060c7f"",
                    ""path"": ""<Touchscreen>/touch3/position/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touchscreen"",
                    ""action"": ""Defender"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Pause"",
            ""id"": ""4f1da02b-bce7-4b7c-9de8-3b8ed6a13a21"",
            ""actions"": [
                {
                    ""name"": ""Resume"",
                    ""type"": ""Button"",
                    ""id"": ""32f18ea2-5126-4dbb-ac59-7637db847357"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e25da184-f252-4712-84ba-a6b7a7f11cc2"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Resume"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Post Game"",
            ""id"": ""6c18699a-4f15-429c-b969-b5c5e830f437"",
            ""actions"": [
                {
                    ""name"": ""Continue"",
                    ""type"": ""Button"",
                    ""id"": ""d3dd7dc9-1cfc-4d56-a23c-a26c71687a66"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b63013ea-6a5b-4918-8d5b-14dff70f8ebd"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Continue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard and Mouse"",
            ""bindingGroup"": ""Keyboard and Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Touchscreen"",
            ""bindingGroup"": ""Touchscreen"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // 1V1
        m__1V1 = asset.FindActionMap("1V1", throwIfNotFound: true);
        m__1V1_Defender = m__1V1.FindAction("Defender", throwIfNotFound: true);
        m__1V1_Invader = m__1V1.FindAction("Invader", throwIfNotFound: true);
        m__1V1_Pause = m__1V1.FindAction("Pause", throwIfNotFound: true);
        // Pause
        m_Pause = asset.FindActionMap("Pause", throwIfNotFound: true);
        m_Pause_Resume = m_Pause.FindAction("Resume", throwIfNotFound: true);
        // Post Game
        m_PostGame = asset.FindActionMap("Post Game", throwIfNotFound: true);
        m_PostGame_Continue = m_PostGame.FindAction("Continue", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // 1V1
    private readonly InputActionMap m__1V1;
    private List<I_1V1Actions> m__1V1ActionsCallbackInterfaces = new List<I_1V1Actions>();
    private readonly InputAction m__1V1_Defender;
    private readonly InputAction m__1V1_Invader;
    private readonly InputAction m__1V1_Pause;
    public struct _1V1Actions
    {
        private @InputMaster m_Wrapper;
        public _1V1Actions(@InputMaster wrapper) { m_Wrapper = wrapper; }
        public InputAction @Defender => m_Wrapper.m__1V1_Defender;
        public InputAction @Invader => m_Wrapper.m__1V1_Invader;
        public InputAction @Pause => m_Wrapper.m__1V1_Pause;
        public InputActionMap Get() { return m_Wrapper.m__1V1; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(_1V1Actions set) { return set.Get(); }
        public void AddCallbacks(I_1V1Actions instance)
        {
            if (instance == null || m_Wrapper.m__1V1ActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m__1V1ActionsCallbackInterfaces.Add(instance);
            @Defender.started += instance.OnDefender;
            @Defender.performed += instance.OnDefender;
            @Defender.canceled += instance.OnDefender;
            @Invader.started += instance.OnInvader;
            @Invader.performed += instance.OnInvader;
            @Invader.canceled += instance.OnInvader;
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
        }

        private void UnregisterCallbacks(I_1V1Actions instance)
        {
            @Defender.started -= instance.OnDefender;
            @Defender.performed -= instance.OnDefender;
            @Defender.canceled -= instance.OnDefender;
            @Invader.started -= instance.OnInvader;
            @Invader.performed -= instance.OnInvader;
            @Invader.canceled -= instance.OnInvader;
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
        }

        public void RemoveCallbacks(I_1V1Actions instance)
        {
            if (m_Wrapper.m__1V1ActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(I_1V1Actions instance)
        {
            foreach (var item in m_Wrapper.m__1V1ActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m__1V1ActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public _1V1Actions @_1V1 => new _1V1Actions(this);

    // Pause
    private readonly InputActionMap m_Pause;
    private List<IPauseActions> m_PauseActionsCallbackInterfaces = new List<IPauseActions>();
    private readonly InputAction m_Pause_Resume;
    public struct PauseActions
    {
        private @InputMaster m_Wrapper;
        public PauseActions(@InputMaster wrapper) { m_Wrapper = wrapper; }
        public InputAction @Resume => m_Wrapper.m_Pause_Resume;
        public InputActionMap Get() { return m_Wrapper.m_Pause; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PauseActions set) { return set.Get(); }
        public void AddCallbacks(IPauseActions instance)
        {
            if (instance == null || m_Wrapper.m_PauseActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PauseActionsCallbackInterfaces.Add(instance);
            @Resume.started += instance.OnResume;
            @Resume.performed += instance.OnResume;
            @Resume.canceled += instance.OnResume;
        }

        private void UnregisterCallbacks(IPauseActions instance)
        {
            @Resume.started -= instance.OnResume;
            @Resume.performed -= instance.OnResume;
            @Resume.canceled -= instance.OnResume;
        }

        public void RemoveCallbacks(IPauseActions instance)
        {
            if (m_Wrapper.m_PauseActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPauseActions instance)
        {
            foreach (var item in m_Wrapper.m_PauseActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PauseActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PauseActions @Pause => new PauseActions(this);

    // Post Game
    private readonly InputActionMap m_PostGame;
    private List<IPostGameActions> m_PostGameActionsCallbackInterfaces = new List<IPostGameActions>();
    private readonly InputAction m_PostGame_Continue;
    public struct PostGameActions
    {
        private @InputMaster m_Wrapper;
        public PostGameActions(@InputMaster wrapper) { m_Wrapper = wrapper; }
        public InputAction @Continue => m_Wrapper.m_PostGame_Continue;
        public InputActionMap Get() { return m_Wrapper.m_PostGame; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PostGameActions set) { return set.Get(); }
        public void AddCallbacks(IPostGameActions instance)
        {
            if (instance == null || m_Wrapper.m_PostGameActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PostGameActionsCallbackInterfaces.Add(instance);
            @Continue.started += instance.OnContinue;
            @Continue.performed += instance.OnContinue;
            @Continue.canceled += instance.OnContinue;
        }

        private void UnregisterCallbacks(IPostGameActions instance)
        {
            @Continue.started -= instance.OnContinue;
            @Continue.performed -= instance.OnContinue;
            @Continue.canceled -= instance.OnContinue;
        }

        public void RemoveCallbacks(IPostGameActions instance)
        {
            if (m_Wrapper.m_PostGameActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPostGameActions instance)
        {
            foreach (var item in m_Wrapper.m_PostGameActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PostGameActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PostGameActions @PostGame => new PostGameActions(this);
    private int m_KeyboardandMouseSchemeIndex = -1;
    public InputControlScheme KeyboardandMouseScheme
    {
        get
        {
            if (m_KeyboardandMouseSchemeIndex == -1) m_KeyboardandMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard and Mouse");
            return asset.controlSchemes[m_KeyboardandMouseSchemeIndex];
        }
    }
    private int m_TouchscreenSchemeIndex = -1;
    public InputControlScheme TouchscreenScheme
    {
        get
        {
            if (m_TouchscreenSchemeIndex == -1) m_TouchscreenSchemeIndex = asset.FindControlSchemeIndex("Touchscreen");
            return asset.controlSchemes[m_TouchscreenSchemeIndex];
        }
    }
    public interface I_1V1Actions
    {
        void OnDefender(InputAction.CallbackContext context);
        void OnInvader(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
    }
    public interface IPauseActions
    {
        void OnResume(InputAction.CallbackContext context);
    }
    public interface IPostGameActions
    {
        void OnContinue(InputAction.CallbackContext context);
    }
}
