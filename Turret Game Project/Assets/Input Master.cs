//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Input Master.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputMaster: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputMaster()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Input Master"",
    ""maps"": [
        {
            ""name"": ""1V1"",
            ""id"": ""5bc58fb5-32e8-43a2-9065-611f1c31a645"",
            ""actions"": [
                {
                    ""name"": ""Defender"",
                    ""type"": ""Button"",
                    ""id"": ""d6bada41-0cb6-46cb-bc46-7cb002376f61"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Invader"",
                    ""type"": ""Button"",
                    ""id"": ""9d43b086-d0d0-49ff-8d1c-a2f7a5475fb1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6b18a3ae-543d-49a9-961c-a870b87f080a"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Invader"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""06434b29-5025-46b8-b35f-ce99492d4f82"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Defender"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard and Mouse"",
            ""bindingGroup"": ""Keyboard and Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // 1V1
        m__1V1 = asset.FindActionMap("1V1", throwIfNotFound: true);
        m__1V1_Defender = m__1V1.FindAction("Defender", throwIfNotFound: true);
        m__1V1_Invader = m__1V1.FindAction("Invader", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // 1V1
    private readonly InputActionMap m__1V1;
    private List<I_1V1Actions> m__1V1ActionsCallbackInterfaces = new List<I_1V1Actions>();
    private readonly InputAction m__1V1_Defender;
    private readonly InputAction m__1V1_Invader;
    public struct _1V1Actions
    {
        private @InputMaster m_Wrapper;
        public _1V1Actions(@InputMaster wrapper) { m_Wrapper = wrapper; }
        public InputAction @Defender => m_Wrapper.m__1V1_Defender;
        public InputAction @Invader => m_Wrapper.m__1V1_Invader;
        public InputActionMap Get() { return m_Wrapper.m__1V1; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(_1V1Actions set) { return set.Get(); }
        public void AddCallbacks(I_1V1Actions instance)
        {
            if (instance == null || m_Wrapper.m__1V1ActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m__1V1ActionsCallbackInterfaces.Add(instance);
            @Defender.started += instance.OnDefender;
            @Defender.performed += instance.OnDefender;
            @Defender.canceled += instance.OnDefender;
            @Invader.started += instance.OnInvader;
            @Invader.performed += instance.OnInvader;
            @Invader.canceled += instance.OnInvader;
        }

        private void UnregisterCallbacks(I_1V1Actions instance)
        {
            @Defender.started -= instance.OnDefender;
            @Defender.performed -= instance.OnDefender;
            @Defender.canceled -= instance.OnDefender;
            @Invader.started -= instance.OnInvader;
            @Invader.performed -= instance.OnInvader;
            @Invader.canceled -= instance.OnInvader;
        }

        public void RemoveCallbacks(I_1V1Actions instance)
        {
            if (m_Wrapper.m__1V1ActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(I_1V1Actions instance)
        {
            foreach (var item in m_Wrapper.m__1V1ActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m__1V1ActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public _1V1Actions @_1V1 => new _1V1Actions(this);
    private int m_KeyboardandMouseSchemeIndex = -1;
    public InputControlScheme KeyboardandMouseScheme
    {
        get
        {
            if (m_KeyboardandMouseSchemeIndex == -1) m_KeyboardandMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard and Mouse");
            return asset.controlSchemes[m_KeyboardandMouseSchemeIndex];
        }
    }
    public interface I_1V1Actions
    {
        void OnDefender(InputAction.CallbackContext context);
        void OnInvader(InputAction.CallbackContext context);
    }
}
